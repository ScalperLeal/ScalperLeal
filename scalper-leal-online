ScalperLeal/
│
├── app.py                      # Interface web (Streamlit)
├── bot.py                      # Lógica principal do bot
├── config.py                   # Configurações e credenciais
├── telegram_notifier.py        # Notificações no Telegram
├── strategy_engine.py          # Estratégia técnica + IA
├── risk_manager.py             # Gestão de risco
├── order_executor_binance.py   # Envio de ordens na Binance
├── requirements.txt            # Dependências
├── README.md                   # Descrição do projeto
└── .gitignore                  # Arquivos a ignorar no GitHub

requirements.txt
streamlit==1.24.0
python-binance==1.0.16
scikit-learn==1.3.0
pandas==2.0.3
numpy==1.25.2
joblib==1.3.2
matplotlib==3.7.2
requests==2.31.0

config.py
# config.py
import os

# Credenciais da Binance
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

# Configurações do mercado
SYMBOL = "BTCUSDT"
TIMEFRAME = "5m"
QTD_CANDLES = 100

# Risco por operação e stop diário
RISK_PER_TRADE_PCT = 0.5
MAX_DRAWDOWN_PCT = 5

# Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

telegram_notifier.py
# telegram_notifier.py
import requests
import os

def send_telegram_message(message):
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("❌ Token ou Chat ID do Telegram não configurados.")
        return

    url = f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"❌ Erro ao enviar mensagem no Telegram: {e}")

bot.py
# bot.py
import time
from binance.client import Client
from config import API_KEY, API_SECRET, SYMBOL, RISK_PER_TRADE_PCT
from telegram_notifier import send_telegram_message

client = Client(API_KEY, API_SECRET)

def calculate_position_size():
    balance = float(client.get_account()['balances'][0]['free'])
    risk_amount = balance * (RISK_PER_TRADE_PCT / 100)
    lot_size = risk_amount / 10  # Exemplo simplificado
    return round(lot_size, 3)

def fetch_data():
    klines = client.get_klines(symbol=SYMBOL, interval="5m", limit=100)
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base_volume', 'taker_buy_quote_volume', 'ignore'
    ])
    df['close'] = df['close'].astype(float)
    df['ma_9'] = df['close'].rolling(9).mean()
    df['ma_21'] = df['close'].rolling(21).mean()
    return df.iloc[-1]

print("🚀 Bot iniciado com sucesso!")
send_telegram_message("🟢 Bot Scalper Leal iniciado!")

while True:
    try:
        data = fetch_data()
        if data['ma_9'] > data['ma_21']:
            signal = "BUY"
        elif data['ma_9'] < data['ma_21']:
            signal = "SELL"
        else:
            signal = None

        if signal:
            qty = calculate_position_size()
            message = f"🚨 SINAL DETECTADO\nAtivo: {SYMBOL}\nAção: *{signal}*\nPreço: {data['close']:.2f}"
            send_telegram_message(message)
        time.sleep(60)
    except Exception as e:
        send_telegram_message(f"❌ Erro no ciclo: {e}")
        time.sleep(10)

app.py
# app.py
import streamlit as st
import pandas as pd
import numpy as np
import time

st.title("📈 Scalper Leal - Painel Online")

col1, col2 = st.columns(2)
col1.metric("Saldo Atual", "USDT 10,000")
col2.metric("ROI Hoje", "+1.2%")

st.subheader("📊 Gráfico ao Vivo")
chart = st.line_chart([])

st.subheader("🧾 Histórico de Operações")
df = pd.DataFrame({
    'Data': ['10:00', '10:05'],
    'Ativo': ['BTCUSDT', 'BTCUSDT'],
    'Sinal': ['BUY', 'SELL'],
    'Preço': [62500, 62600],
    'Resultado': ['$+100', '$+98']
})
st.table(df)

st.subheader("📄 Logs em Tempo Real")
logs = st.empty()

for i in range(100):
    new_data = pd.DataFrame([np.random.rand()])
    chart.add_rows(new_data)
    logs.text(f"[INFO] Ciclo {i+1} concluído.")
    time.sleep(5)

.gitignore
__pycache__
*.pyc
env/
models/
*.pkl
*.log
.DS_Store

README.md
# 🧠 Scalper Leal – Bot Automático com IA e Telegram

Bot de day trade automatizado para Binance com:
- Estratégia técnica + IA preditiva
- Interface web online
- Notificações via Telegram
- Proteção contra drawdown

## 📦 Requisitos

- Python 3.8+
- Conta na Binance
- Bot no Telegram

## 🚀 Como usar

1. Clone o repositório
2. Configure suas credenciais nas Secrets do GitHub
3. Faça deploy no Streamlit Cloud e Render
